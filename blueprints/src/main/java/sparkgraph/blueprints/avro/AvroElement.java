/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sparkgraph.blueprints.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroElement extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroElement\",\"namespace\":\"sparkgraph.blueprints.avro\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ElementType\",\"symbols\":[\"VERTEX\",\"EDGE\"]}},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"props\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroProperty\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"value\",\"type\":[\"int\",\"boolean\",\"long\",\"string\",\"float\",\"double\"]}]}}},{\"name\":\"edge\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AvroEdge\",\"fields\":[{\"name\":\"src\",\"type\":\"long\"},{\"name\":\"dest\",\"type\":\"long\"},{\"name\":\"label\",\"type\":\"string\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public sparkgraph.blueprints.avro.ElementType type;
  @Deprecated public long id;
  @Deprecated public java.util.List<sparkgraph.blueprints.avro.AvroProperty> props;
  @Deprecated public sparkgraph.blueprints.avro.AvroEdge edge;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public AvroElement() {}

  /**
   * All-args constructor.
   */
  public AvroElement(sparkgraph.blueprints.avro.ElementType type, java.lang.Long id, java.util.List<sparkgraph.blueprints.avro.AvroProperty> props, sparkgraph.blueprints.avro.AvroEdge edge) {
    this.type = type;
    this.id = id;
    this.props = props;
    this.edge = edge;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return id;
    case 2: return props;
    case 3: return edge;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (sparkgraph.blueprints.avro.ElementType)value$; break;
    case 1: id = (java.lang.Long)value$; break;
    case 2: props = (java.util.List<sparkgraph.blueprints.avro.AvroProperty>)value$; break;
    case 3: edge = (sparkgraph.blueprints.avro.AvroEdge)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public sparkgraph.blueprints.avro.ElementType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(sparkgraph.blueprints.avro.ElementType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'props' field.
   */
  public java.util.List<sparkgraph.blueprints.avro.AvroProperty> getProps() {
    return props;
  }

  /**
   * Sets the value of the 'props' field.
   * @param value the value to set.
   */
  public void setProps(java.util.List<sparkgraph.blueprints.avro.AvroProperty> value) {
    this.props = value;
  }

  /**
   * Gets the value of the 'edge' field.
   */
  public sparkgraph.blueprints.avro.AvroEdge getEdge() {
    return edge;
  }

  /**
   * Sets the value of the 'edge' field.
   * @param value the value to set.
   */
  public void setEdge(sparkgraph.blueprints.avro.AvroEdge value) {
    this.edge = value;
  }

  /** Creates a new AvroElement RecordBuilder */
  public static sparkgraph.blueprints.avro.AvroElement.Builder newBuilder() {
    return new sparkgraph.blueprints.avro.AvroElement.Builder();
  }
  
  /** Creates a new AvroElement RecordBuilder by copying an existing Builder */
  public static sparkgraph.blueprints.avro.AvroElement.Builder newBuilder(sparkgraph.blueprints.avro.AvroElement.Builder other) {
    return new sparkgraph.blueprints.avro.AvroElement.Builder(other);
  }
  
  /** Creates a new AvroElement RecordBuilder by copying an existing AvroElement instance */
  public static sparkgraph.blueprints.avro.AvroElement.Builder newBuilder(sparkgraph.blueprints.avro.AvroElement other) {
    return new sparkgraph.blueprints.avro.AvroElement.Builder(other);
  }
  
  /**
   * RecordBuilder for AvroElement instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroElement>
    implements org.apache.avro.data.RecordBuilder<AvroElement> {

    private sparkgraph.blueprints.avro.ElementType type;
    private long id;
    private java.util.List<sparkgraph.blueprints.avro.AvroProperty> props;
    private sparkgraph.blueprints.avro.AvroEdge edge;

    /** Creates a new Builder */
    private Builder() {
      super(sparkgraph.blueprints.avro.AvroElement.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sparkgraph.blueprints.avro.AvroElement.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.props)) {
        this.props = data().deepCopy(fields()[2].schema(), other.props);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.edge)) {
        this.edge = data().deepCopy(fields()[3].schema(), other.edge);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing AvroElement instance */
    private Builder(sparkgraph.blueprints.avro.AvroElement other) {
            super(sparkgraph.blueprints.avro.AvroElement.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.props)) {
        this.props = data().deepCopy(fields()[2].schema(), other.props);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.edge)) {
        this.edge = data().deepCopy(fields()[3].schema(), other.edge);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public sparkgraph.blueprints.avro.ElementType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder setType(sparkgraph.blueprints.avro.ElementType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder setId(long value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'props' field */
    public java.util.List<sparkgraph.blueprints.avro.AvroProperty> getProps() {
      return props;
    }
    
    /** Sets the value of the 'props' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder setProps(java.util.List<sparkgraph.blueprints.avro.AvroProperty> value) {
      validate(fields()[2], value);
      this.props = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'props' field has been set */
    public boolean hasProps() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'props' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder clearProps() {
      props = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'edge' field */
    public sparkgraph.blueprints.avro.AvroEdge getEdge() {
      return edge;
    }
    
    /** Sets the value of the 'edge' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder setEdge(sparkgraph.blueprints.avro.AvroEdge value) {
      validate(fields()[3], value);
      this.edge = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'edge' field has been set */
    public boolean hasEdge() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'edge' field */
    public sparkgraph.blueprints.avro.AvroElement.Builder clearEdge() {
      edge = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AvroElement build() {
      try {
        AvroElement record = new AvroElement();
        record.type = fieldSetFlags()[0] ? this.type : (sparkgraph.blueprints.avro.ElementType) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
        record.props = fieldSetFlags()[2] ? this.props : (java.util.List<sparkgraph.blueprints.avro.AvroProperty>) defaultValue(fields()[2]);
        record.edge = fieldSetFlags()[3] ? this.edge : (sparkgraph.blueprints.avro.AvroEdge) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
